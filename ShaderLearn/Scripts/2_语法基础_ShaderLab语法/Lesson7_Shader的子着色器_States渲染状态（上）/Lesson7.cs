using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Lesson7 : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        #region 知识回顾
        //1.
        //SubShader子着色器基本构成为：
        //             --------Tags(渲染标签)
        //            |--------States(渲染状态)
        //SubShader---|--------Pass(渲染通道1)
        //            |--------Pass(渲染通道2)
        //             --------....(渲染通道n)

        //渲染状态：通过状态来确定渲染时的剔除方式、深度测试方式、混合方式等等内容

        //2.
        //片元：
        //在渲染管线中，片元是指在光栅化阶段生成的像素或像素片段
        //片元是渲染管线中进行像素级别操作和计算的基本单位
        //每个片元代表了屏幕上的一个像素，并且具有位置信息和与之相关的属性
        //比如：颜色、深度值、法线等等
        #endregion

        #region 知识点一 渲染状态的语法结构
        //渲染状态 状态类型

        //渲染状态是通过 渲染状态关键词+空格+状态类型 决定的
        //如果存在多个渲染状态
        //可以通过空行隔开
        #endregion

        #region 知识点二 剔除方式
        //主要作用：
        //设置多边形的剔除方式，有背面剔除、正面剔除、不剔除
        //所谓的剔除，就是不渲染，背面剔除就是背面不渲染，正面剔除就是正面不渲染，不剔除就是都渲染

        //Cull Back     背面剔除
        //Cull Front    正面剔除
        //Cull Off      不剔除
        //不设置的话，默认为背面剔除

        //一般情况下，我们需要两面渲染时，会设置为不剔除
        #endregion

        #region 知识点三 深度缓冲
        //主要作用：
        //是否写入深度缓冲
        //深度缓冲（Depth Buffer）：
        //深度缓冲是一个与屏幕像素对应的缓冲区，用于存储每个像素的深度值（距离相机的距离）。
        //在渲染场景之前，深度缓冲被初始化为最大深度值，表示所有像素都在相机之外。
        //最后留在深度缓冲中的信息会被渲染

        //ZWrite On     写入深度缓冲
        //ZWrite Off    不写入深度缓冲
        //不设置的话，默认为写入

        //一般情况下，我们在做透明等特殊效果时，会设置为不写入
        #endregion

        #region 知识点四 深度测试
        //主要作用：
        //设置深度测试的对比方式

        //深度测试的主要目的是确保在渲染时，像素按照正确的深度（距离相机的距离）顺序进行绘制，
        //从而创建正确的遮挡关系和透视效果
        //在渲染场景之前，深度缓冲被初始化为最大深度值，表示所有像素都在相机之外。
        //在渲染过程中，对于每个像素，深度测试会将当前像素的深度值与深度缓冲中对应位置的值进行比较。
        //一般情况下
        //1.如果当前像素的深度值小于深度缓冲中的值，说明当前像素在其他物体之前，它会被绘制，并更新深度缓冲。
        //2.如果当前像素的深度值大于等于深度缓冲中的值，说明当前像素在其他物体之后，它会被丢弃，不会被绘制，并保持深度缓冲不变。

        //ZTest Less        小于当前深度缓冲中的值，就通过测试，写入到深度缓冲中
        //ZTest Greater     大于当前深度缓冲中的值，就通过测试，写入到深度缓冲中
        //ZTest LEqual      小于等于当前深度缓冲中的值，就通过测试，写入到深度缓冲中
        //ZTest GEqual      大于等于当前深度缓冲中的值，就通过测试，写入到深度缓冲中
        //ZTest Equal       等于当前深度缓冲中的值，就通过测试，写入到深度缓冲中
        //ZTest NotEqual    不等于当前深度缓冲中的值，就通过测试，写入到深度缓冲中
        //ZTest Always      始终通过深度测试写入深度缓冲中
        //不设置的话，默认为LEqual 小于等于

        //一般情况下，我们只有在实现一些特殊效果时才会区修改深度测试方式，比如透明物体渲染会修改为Less，描边效果会修改为Greater等
        #endregion

        #region 知识点五 混合方式
        //主要作用：
        //设置渲染图像的混合方式（多种颜色叠加混合，比如透明、半透明效果和遮挡的物体进行颜色混合）

        //Blend One One                         线性减淡
        //Blend SrcAlpha OneMinusSrcAlpha       正常透明混合
        //Blend OneMinusDstColor One            滤色
        //Blend DstColor Zero                   正片叠底
        //Blend DstColor SrcColor               X光片效果
        //Blend One OneMinusSrcAlpha            透明度混合
        //等等
        //不设置的话，默认不会进行混合

        //一般情况下，我们需要多种颜色叠加渲染时，就需要设置混合方式，具体情况具体处理
        #endregion

        #region 知识点六 其他渲染状态
        //1.LOD         控制LOD级别，在不同距离下使用不同的渲染方式处理
        //2.ColorMask   设置颜色通道的写入蒙版，默认蒙版为RGBA
        //等等

        //我们目前主要掌握剔除方式、深度缓冲、深度测试、混合方式即可
        #endregion

        #region 知识点七 渲染状态的注意事项
        //以上这些状态不仅可以在SubShader语句块中声明
        //之后讲解的Pass渲染通道语句块中也可以声明这些渲染状态
        //如果在SubShader语句块中使用会影响之后的所有渲染通道Pass
        //如果在Pass语句块中使用只会影响当前Pass渲染通道，不会影响其他的Pass
        #endregion

        #region 总结
        //渲染状态对于我们来说很重要
        //它可以影响最终我们看到的渲染效果
        //其中
        //剔除方式决定了 模型正面背面是否能够被渲染
        //深度缓冲和深度测试 决定了景深关系的确定以及透明效果的正确表达等
        //混合方式 决定了透明半透明颜色的正确表现，以及一些特殊颜色效果的表现

        //这些内容，大家可以将其记入自己的笔记当中
        //之后在使用他们时，翻看笔记进行复习
        #endregion
    }

    // Update is called once per frame
    void Update()
    {

    }
}